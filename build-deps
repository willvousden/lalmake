#!/usr/bin/env bash

fail()
{
    local message=${1:-"Something went wrong!"}
    echo $message
    exit 1
}

prog=$(basename "$0")
usage()
{
    cat <<EOF
Usage: $prog [args] <lscsoft-dir>

Builds and installs the requested dependencies for LALSuite.

Positional arguments:

    <lscsoft-dir>               The installation prefix for LALSuite.

Optional arguments:

    --frame <src-dir>           Path to libframe source directory.
    --metaio <src-dir>          Path to metaio source directory.
    --user-env <src-dir>        Path to lscsoft-user-env directory.
    -n, --nprocs <n>            Number of build processes to spawn. Defaults to 4.
    -C, --cc                    The C compiler to use. Defaults to clang if available, otherwise system default.
    -h, --help                  Display this help message.

Any combination of --frame, --metaio, and --user-env may be given.
EOF
    exit 0
}

options=$(getopt --name "$prog" --options f:m:u:n:c:h --longoptions frame:,metaio:,user-env:,nprocs:,cc:,help -- $@ 2> /dev/null) || fail "Couldn't parse options."
eval set -- "$options"
if [[ $# < 2 ]]; then
    usage
else
    while [[ $# > 0 ]]; do
        case "$1" in
            -f | --frame) libframe=$2; shift;;
            -m | --metaio) metaio=$2; shift;;
            -u | --user-env) lsc_user_env=$2; shift;;
            -n | --nprocs) nprocs=$2; shift;;
            -C | --cc) cc=$2; shift;;
            -h | --help) usage;;
            --) shift; break;;
        esac
        shift
    done
fi

root=$1
[[ ! $root ]] && fail "No root directory given."

# Number of build processes.
if [[ ! $nprocs ]]; then
    nprocs=4
fi

# Compiler details.
cflags="-march=native -g"
if [[ ! $cc ]]; then
    # User didn't specify CC at command line.
    if [[ -x $(which clang) ]]; then
        cc=clang
    fi
fi

capture_uninstall()
{
    # Takes the the name/path of the script to be generated as an argument.
    local target=$1

    # Make sure directory exists (and file doesn't).
    if [[ ! -d $(dirname $target) ]]; then
        mkdir -p $(dirname $target)
    elif [[ -f $target ]]; then
        rm -f $target
    fi

    echo "#!/usr/bin/env sh" > $target

    local orig_rm=$(which rm)
    cat > rm <<EOF
echo "rm \$*" 1>&3
exit 0
EOF
    chmod +x rm

    local orig_PATH=$PATH
    PATH=$(pwd):$PATH
    export PATH
    make uninstall 3>> $target
    PATH=$orig_PATH
    export PATH

    echo "rm -f $target" >> $target
    chmod +x $target
    $orig_rm -f rm
    return 0
}

install_dep()
{
    local src=$1
    local uninstall=$2
    local prefix=$3
    local flags=$4

    # Check source directory.
    [[ ! -d $src ]] && fail "Invalid source directory: $src"

    echo "Installing $src to $prefix"
    mkdir -p $prefix
    pushd $src > /dev/null
    make distclean || true
    ./configure --prefix=$prefix $flags CC="$cc" CFLAGS="$cflags" || fail
    make -j $nprocs || fail
    make install || fail

    # Generate uninstall script.
    capture_uninstall $uninstall || fail
    echo "Uninstall script: $uninstall"

    popd > /dev/null
}

installed=
uninstall_dir=$root/uninstall
if [[ $libframe ]]; then
    installed=true
    install_dep $libframe $uninstall_dir/libframe.sh $root/libframe "--disable-octave --disable-python --with-matlab=no"
fi
if [[ $metaio ]]; then
    installed=true
    install_dep $metaio $uninstall_dir/libmetaio.sh $root/libmetaio
fi
if [[ $lsc_user_env ]]; then
    installed=true
    install_dep $lsc_user_env $uninstall_dir/lscsoft-user-env.sh $root
fi

if [[ ! $installed ]]; then
    echo "Nothing to be done."
fi
