#!/usr/bin/env bash

fail()
{
    local message=${1:-"Something went wrong!"}
    echo $message
    exit 1
}

prog=$(basename "$0")
usage()
{
    cat <<EOF
Usage: $prog [args]

Builds and installs LALSuite.

Arguments:

    --prefix <prefix>                   Installation prefix for LALSuite.
    --src <src-dir>                     Build from <src-dir>.

Optional arguments:
    -m, --modules <mod1,mod2,...>       Individual modules to build.
    -c, --c                             Build all C modules.
    -p, --python                        Build all Python modules.
    -n, --nprocs <n>                    Number of build processes to spawn. Defaults to 4.
    -C, --cc                            The C compiler to use. Defaults to clang if available, otherwise system default.
    -F, --flags <flags>                 Flags to pass into the configure processed. Defaults to --enable-swig-python --enable-mpi --disable-laldetchar.
    -b, --branched                      Build in a separate subdirectory for the current Git branch.
    -d, --dry                           Dry run: go through the motions but don't do anything.
    -h, --help                          Display this help message.

By default, both C and Python modules are built; specify one to build only that one.
EOF
    exit 0
}

prog=$(basename "$0")
options=$(getopt --name "$prog" --options m:cpn:C:F:bdh --longoptions modules:,c,python,prefix:,src:,nprocs:,cc:,flags:,branched,dry,help -- $@ 2> /dev/null) || fail "Couldn't parse options."
eval set -- "$options"
if (( $# < 2 )); then
    usage
else
    while (( $# > 0 )); do
        case "$1" in
            --prefix)
                prefix=$2
                shift;;
            --src)
                srcdir=$2
                shift;;
            -m | --modules)
                modules=$(echo $2 | tr ',' ' ')
                shift;;
            -c | --c)
                buildc=true;;
            -p | --python)
                buildpython=true;;
            -n | --nprocs)
                nprocs=$2
                shift;;
            -C | --cc)
                cc=$2
                shift;;
            -F | --flags)
                flags=$2
                shift;;
            -d | --dry)
                dry=true;;
            -b | --branched)
                branched=true;;
            -h | --help)
                usage;;
            --)
                shift
                break;;
        esac
        shift
    done
fi

set -e

# Check source directory and prefix.
[[ ! $prefix ]] && fail "Prefix not specified!"
[[ ! -d $srcdir ]] && fail "Invalid source directory!"
srcdir=$(readlink -f $srcdir)

# Remember script directory.
scriptdir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Common flags to every configure process.
flags=${flags:-"--enable-swig-python --enable-mpi --disable-laldetchar"}

# Number of build processes.
nprocs=${nprocs:-$(nprocs)}

# Compiler details.
cflags="-g"
if [[ ! $cc ]]; then
    # User didn't specify CC at command line.
    if [[ -x $(which clang) ]]; then
        cc=clang
    fi
fi
if [[ $cc ]]; then
    echo -n "Building with \`$cc $cflags'"
else
    echo -n "Building with default CC with \`$cflags'"
fi
echo " ($nprocs jobs)."

# Build in separate directory for this branch?
cd $srcdir
if [[ $branched ]]; then
    commit=$(git symbolic-ref --short HEAD)
    prefix="$prefix/$commit"
fi

lscsoftuserenv=$prefix/lscsoft-user-env.sh
[[ -f $lscsoftuserenv ]] || fail "Could not find $lscsoftuserenv; perhaps lscsoft-user-env is not installed?"
. $lscsoftuserenv

# Generate the runtime config file.
lscsoftrc=$prefix/etc/lscsoftrc.sh
generate_rc()
{
    echo "Generating $lscsoftrc"
    [[ $dry ]] || . $scriptdir/generate-rc $prefix $lscsoftrc
}

echo "Installing to $prefix"

# Code to install C modules. Can either build the whole lot (top-level make) or individual modules.
cmodules="lalframe lalmetaio lalsimulation lalburst lalinspiral lalstochastic lalpulsar lalinference lalapps"
make_c() {
    if [[ $# == 0 ]]; then
        # No modules requested, so do a full build of all C modules.
        echo "Building (top-level) $srcdir"

        cd $srcdir
        if [[ ! $dry ]]; then
            make distclean || true
            ./00boot || fail
            ./configure --prefix=$prefix $flags CC="$cc" CFLAGS="$cflags" || fail
            make -j$nprocs || fail
            make install || fail
        fi
    else
        # Build only the requested C modules.
        for m in $@; do
            # Check that this module really exists.
            local dir=$srcdir/$m
            [[ ! -d $dir ]] && echo "Could not find C module $m" && continue

            echo "Building $dir"
            cd $dir
            if [[ ! $dry ]]; then
                make distclean || true
                ./00boot || fail
                ./configure --prefix=$prefix $flags CC="$cc" CFLAGS="$cflags" || fail
                make -j $nprocs || fail
                make install || fail
            fi
        done
    fi
}

# Code to install Python modules. Again, can either install all of them or individual ones.
pythonmodules="glue pylal"
make_python() {
    # Source the runtime config file.
    [[ -f $lscsoftrc ]] || generate_rc
    [[ $dry ]] || . $lscsoftrc

    # If no modules were requested, build all of them.
    local modules=$@
    [[ $# == 0 ]] && modules=$pythonmodules

    for m in $modules; do
        # Check that the module exists.
        local dir=$srcdir/$m
        [[ ! -d $dir ]] && echo "Could not find Python module $m" && continue

        # Now build it.
        echo "Building $dir"
        cd $dir
        if [[ ! $dry ]]; then
            rm -rf build
            python setup.py install --prefix=$prefix || fail
        fi
    done
}

# Get the intersection of two word lists.
intersection()
{
    comm -12 <(echo $1 | tr ' ' '\n' | sort) <(echo $2 | tr ' ' '\n' | sort)
}

if [[ ! $modules ]]; then
    # Build some combination of C and Python modules.
    if [[ ! $buildc && ! $buildpython ]]; then
        # Build both.
        make_c
        make_python
    else
        # Build the ones the user asked for.
        [[ $buildc ]] && make_c
        [[ $buildpython ]] && make_python
    fi
else
    # Build specified modules.
    for m in $(intersection "$modules" "$cmodules"); do
        make_c $m
    done
    for m in $(intersection "$modules" "$pythonmodules"); do
        make_python $m
    done
fi

echo "All done!"
