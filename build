#!/usr/bin/env bash

fail()
{
    local message=${1:-"Something went wrong!"}
    echo $message
    exit 1
}

prog=$(basename "$0")
usage()
{
    cat <<EOF
Usage: $prog [args]

Builds and installs LALSuite.

Arguments:

    --prefix <prefix>           Installation prefix for LALSuite.
    --src <src-dir>             Build from <src-dir>.

Optional arguments:
    -c, --c                     Build C modules.
    -p, --python                Build Python modules.
    -n, --nprocs <n>            Number of build processes to spawn. Defaults to 4.
    -C, --cc                    The C compiler to use. Defaults to clang if available, otherwise system default.
    -h, --help                  Display this help message.

By default, both C and Python modules are built; specify one to build only that one.
EOF
    exit 0
}

prog=$(basename "$0")
options=$(getopt --name "$prog" --options cpn:C:F:h --longoptions c,python,prefix:,src:,nprocs:,cc:,flags:,help -- $@ 2> /dev/null) || fail "Couldn't parse options."
eval set -- "$options"
if [[ $# < 2 ]]; then
    usage
else
    while [[ $# > 0 ]]; do
        case "$1" in
            --prefix)
                prefix=$2
                shift;;
            --src)
                srcdir=$2
                shift;;
            -c | --c)
                buildc=true;;
            -p | --python)
                buildpython=true;;
            -n | --nprocs)
                nprocs=$2
                shift;;
            -C | --cc)
                cc=$2
                shift;;
            -F | --flags)
                flags=$2
                shift;;
            -h | --help)
                usage;;
            --)
                shift
                break;;
        esac
        shift
    done
fi

set -e

# Check source directory and prefix.
[[ ! $prefix ]] && fail "Prefix not specified!"
[[ ! -d $srcdir ]] && fail "Invalid source directory!"
srcdir=$(readlink -f $srcdir)

# Remember script directory.
scriptdir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Compiler details.
cflags="-march=native -g"
if [[ ! $cc ]]; then
    # User didn't specify CC at command line.
    if [[ -x $(which clang) ]]; then
        cc=clang
    fi
fi

# Common flags to every configure process.
if [[ ! $flags ]]; then
    flags="--enable-swig-python --enable-mpi --disable-laldetchar"
fi

# Number of build processes.
if [[ ! $nprocs ]]; then
    nprocs=4
fi

# lscsoftrc location.
lscsoftrc=$prefix/etc/lscsoftrc

echo "Installing to $prefix"

make_c() {
    cd $srcdir

    echo "Building C modules from $srcdir"
    make distclean || true
    ./00boot
    ./configure --prefix=$prefix $flags CC="$cc" CFLAGS="$cflags"
    make -j $nprocs
    make install

    # Generate lscsoftrc.
    . $scriptdir/generate-rc $prefix $lscsoftrc
}

make_python() {
    [[ ! -f $lscsoftrc ]] && fail "Could not find $lscsoftrc"
    . $lscsoftrc

    echo "Building $srcdir/pylal"
    cd $srcdir/pylal
    rm -rf build
    python setup.py install --prefix=$prefix
    . $lscsoftrc

    echo "Building $srcdir/glue"
    cd $srcdir/glue
    rm -rf build
    python setup.py install --prefix=$prefix
    . $lscsoftrc
}

if [[ ! $buildc && ! $buildpython ]]; then
    # Build both.
    make_c
    make_python
else
    if [[ $buildc ]]; then
        make_c
    fi

    if [[ $buildpython ]]; then
        make_python
    fi
fi
